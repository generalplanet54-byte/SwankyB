/**
 * Sync Bolt AI Database Content to Local Files
 * 
 * This script fetches the latest articles and products from the Bolt AI database
 * and updates the local launchArticles.ts file with the latest content.
 * 
 * Usage: node scripts/sync-bolt-content.mjs
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

// Load Bolt AI database credentials from wrangler.toml or environment variables
const BOLT_DATABASE_URL = process.env.VITE_BOLT_DATABASE_URL || "https://wuwczwpfnswwctumvqsq.supabase.co";
const BOLT_DATABASE_ANON_KEY = process.env.VITE_BOLT_DATABASE_ANON_KEY || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind1d2N6d3BmbnN3d2N0dW12cXNxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk1Mzg4ODMsImV4cCI6MjA3NTExNDg4M30.EGziTHFcFPQprqmSrvvfxzEEHY2HVuknezkpGidd3UA";

const supabase = createClient(BOLT_DATABASE_URL, BOLT_DATABASE_ANON_KEY);

/**
 * Fetch articles and their related products from Bolt AI database
 */
async function fetchBoltData() {
  console.log('üîÑ Fetching data from Bolt AI database...');
  console.log(`   Database: ${BOLT_DATABASE_URL}`);
  
  try {
    // Fetch all published articles
    const { data: articles, error: articlesError } = await supabase
      .from('articles')
      .select('*')
      .eq('is_published', true)
      .order('published_at', { ascending: false });

    if (articlesError) {
      throw new Error(`Failed to fetch articles: ${articlesError.message}`);
    }

    console.log(`‚úÖ Found ${articles?.length || 0} published articles`);

    // Fetch article-product relationships
    const { data: articleProducts, error: apError } = await supabase
      .from('article_products')
      .select(`
        article_id,
        display_order,
        products (*)
      `)
      .order('display_order', { ascending: true });

    if (apError) {
      throw new Error(`Failed to fetch article-product relationships: ${apError.message}`);
    }

    console.log(`‚úÖ Found ${articleProducts?.length || 0} article-product relationships`);

    return { articles, articleProducts };
  } catch (error) {
    console.error('‚ùå Error fetching data from Bolt AI database:', error.message);
    throw error;
  }
}

/**
 * Transform database articles to the format used in launchArticles.ts
 */
function transformArticles(articles, articleProducts) {
  console.log('üîÑ Transforming articles to local format...');
  
  return articles.map((article, index) => {
    // Find related products for this article
    const relatedProducts = articleProducts
      .filter(ap => ap.article_id === article.id)
      .map(ap => {
        const product = ap.products;
        return {
          id: product.id,
          name: product.name,
          description: product.description,
          price: product.price ? `$${product.price}` : '',
          originalPrice: product.original_price ? `$${product.original_price}` : undefined,
          image: product.image_url,
          affiliateUrl: product.amazon_url,
          rating: product.rating || 0,
          provider: 'amazon',
          category: product.category
        };
      });

    return {
      id: String(index + 1),
      title: article.title,
      slug: article.slug,
      excerpt: article.excerpt,
      content: article.content,
      author: article.author || 'SwankyBoyz Team',
      publishedAt: article.published_at,
      updatedAt: article.updated_at,
      featuredImage: article.featured_image,
      category: article.category,
      tags: article.tags || [],
      readTime: article.read_time || '5 min read',
      featured: article.is_featured || false,
      seoTitle: article.meta_title || article.title,
      seoDescription: article.meta_description || article.excerpt,
      affiliateProducts: relatedProducts
    };
  });
}

/**
 * Generate TypeScript file content from transformed articles
 */
function generateTypeScriptContent(transformedArticles) {
  console.log('üîÑ Generating TypeScript content...');
  
  const articlesJson = JSON.stringify(transformedArticles, null, 2)
    .replace(/"([^"]+)":/g, '$1:') // Remove quotes from keys
    .replace(/: "amazon"/g, ": 'amazon' as const"); // Fix provider type

  return `import { Article } from '../contexts/ContentContext';

/**
 * Launch Articles - Synced from Bolt AI Database
 * 
 * This file is auto-generated by scripts/sync-bolt-content.mjs
 * Last synced: ${new Date().toISOString()}
 * 
 * To update this file, run: npm run sync-bolt-content
 */

export const launchArticles: Article[] = ${articlesJson};
`;
}

/**
 * Write the updated content to launchArticles.ts
 */
function writeToFile(content) {
  const filePath = path.join(process.cwd(), 'src', 'data', 'launchArticles.ts');
  console.log(`üîÑ Writing to ${filePath}...`);
  
  try {
    fs.writeFileSync(filePath, content, 'utf8');
    console.log('‚úÖ Successfully updated launchArticles.ts');
  } catch (error) {
    console.error('‚ùå Error writing file:', error.message);
    throw error;
  }
}

/**
 * Main sync function
 */
async function syncBoltContent() {
  console.log('\nüöÄ Starting Bolt AI Database Content Sync\n');
  console.log('‚ïê'.repeat(60));
  
  try {
    // Step 1: Fetch data from Bolt AI database
    const { articles, articleProducts } = await fetchBoltData();
    
    if (!articles || articles.length === 0) {
      console.log('\n‚ö†Ô∏è  No articles found in Bolt AI database. Skipping sync.');
      return;
    }

    // Step 2: Transform articles to local format
    const transformedArticles = transformArticles(articles, articleProducts);
    
    // Step 3: Generate TypeScript content
    const tsContent = generateTypeScriptContent(transformedArticles);
    
    // Step 4: Write to file
    writeToFile(tsContent);
    
    console.log('\n' + '‚ïê'.repeat(60));
    console.log('‚ú® Sync completed successfully!');
    console.log(`   Updated ${transformedArticles.length} articles`);
    console.log('\nüí° Next steps:');
    console.log('   1. Review the changes in src/data/launchArticles.ts');
    console.log('   2. Test the application: npm run dev');
    console.log('   3. Commit the changes if everything looks good\n');
    
  } catch (error) {
    console.error('\n' + '‚ïê'.repeat(60));
    console.error('‚ùå Sync failed:', error.message);
    console.error('\nüí° Troubleshooting:');
    console.error('   1. Check your internet connection');
    console.error('   2. Verify Bolt AI database credentials in wrangler.toml');
    console.error('   3. Ensure the database tables exist and have data');
    console.error('   4. Check if RLS policies allow public read access\n');
    process.exit(1);
  }
}

// Run the sync
syncBoltContent();
