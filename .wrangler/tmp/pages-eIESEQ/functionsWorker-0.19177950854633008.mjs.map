{
  "version": 3,
  "sources": ["../../../functions/auth.ts", "../../../functions/api/admin/change-password.ts", "../../../functions/api/admin/generate-article.ts", "../../../functions/api/admin/me.ts", "../../../functions/api/articles-d1.ts", "../../../functions/api/login.ts", "../../../functions/api/logout.ts", "../../../functions/api/products-d1.ts", "../../../functions/api/affiliate-click.ts", "../../../functions/api/newsletter.ts", "../../../functions/api/site-info.ts", "functionsRoutes-0.07009533807901347.mjs", "../../../node_modules/path-to-regexp/src/index.ts", "../../../node_modules/wrangler/templates/pages-template-worker.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-SQBGdV/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-SQBGdV/middleware-loader.entry.ts"],
  "sourceRoot": "/workspaces/SwankyB/.wrangler/tmp/pages-eIESEQ/functionsWorker-0.19177950854633008.mjs",
  "sourcesContent": ["\n\n// JWT_SECRET will be set in each function handler from env\nlet JWT_SECRET: string = '';\nexport function setJWTSecret(secret: string) {\n  JWT_SECRET = secret;\n}\n\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  passwordHash: string;\n  role: 'admin';\n  createdAt: string;\n  lastLogin?: string;\n  failedAttempts: number;\n  lockedUntil?: string;\n}\n\n// In production, this would be stored in a database\nconst users: User[] = [\n  {\n    id: '1',\n    username: 'netmin',\n    email: 'admin@swankyboyz.com',\n    // SHA-256 hash of \"P@ssW#rd\" for demo\n    // NOTE: corrected SHA-256 (base64) for password \"P@ssW#rd\"\n    passwordHash: 'CHoFpVm3FNu8THh/uHxYNqpGRl0I4larqXg6A7e9Mec=',\n    role: 'admin',\n    createdAt: new Date().toISOString(),\n    failedAttempts: 0\n  }\n];\n\n/**\n * Utility: base64 encode/decode (URL-safe for JWT)\n */\nfunction toBase64(input: ArrayBuffer): string {\n  const base64 = btoa(String.fromCharCode(...new Uint8Array(input)));\n  // Convert to URL-safe base64\n  return base64.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\nfunction fromBase64(str: string): ArrayBuffer {\n  // Convert from URL-safe base64 to standard base64\n  let base64 = str.replace(/-/g, '+').replace(/_/g, '/');\n  // Add padding if needed\n  while (base64.length % 4) {\n    base64 += '=';\n  }\n  const binary = atob(base64);\n  const len = binary.length;\n  const buffer = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    buffer[i] = binary.charCodeAt(i);\n  }\n  return buffer.buffer;\n}\n\n/**\n * Password hashing & verification (WebCrypto)\n */\nexport async function hashPassword(password: string): Promise<string> {\n  const data = new TextEncoder().encode(password);\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", data);\n  return toBase64(hashBuffer);\n}\n\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  const hashed = await hashPassword(password);\n  return hashed === hash;\n}\n\n/**\n * JWT signing & verification (HS256, WebCrypto)\n */\nasync function getKey(secret: string, usage: KeyUsage): Promise<CryptoKey> {\n  if (!secret) throw new Error('JWT_SECRET is not set');\n  return crypto.subtle.importKey(\n    \"raw\",\n    new TextEncoder().encode(secret),\n    { name: \"HMAC\", hash: \"SHA-256\" },\n    false,\n    [usage]\n  );\n}\n\nexport async function createJWT(payload: Record<string, any>): Promise<string> {\n  const header = { alg: \"HS256\", typ: \"JWT\" };\n  const iat = Math.floor(Date.now() / 1000);\n  const exp = iat + 24 * 60 * 60; // 24h expiry\n\n  const body = { ...payload, iat, exp };\n\n  // Use URL-safe base64 encoding for JWT\n  const headerB64 = btoa(JSON.stringify(header)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n  const bodyB64 = btoa(JSON.stringify(body)).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n  const unsigned = `${headerB64}.${bodyB64}`;\n\n  const key = await getKey(JWT_SECRET, \"sign\");\n  const signature = await crypto.subtle.sign(\"HMAC\", key, new TextEncoder().encode(unsigned));\n  const signatureBase64 = toBase64(signature);\n\n  return `${unsigned}.${signatureBase64}`;\n}\n\nexport async function verifyJWT(token: string): Promise<any> {\n  const [headerB64, bodyB64, signatureB64] = token.split(\".\");\n  if (!headerB64 || !bodyB64 || !signatureB64) {\n    throw new Error(\"Invalid token format\");\n  }\n\n  const unsigned = `${headerB64}.${bodyB64}`;\n  const key = await getKey(JWT_SECRET, \"verify\");\n  const valid = await crypto.subtle.verify(\n    \"HMAC\",\n    key,\n    fromBase64(signatureB64),\n    new TextEncoder().encode(unsigned)\n  );\n\n  if (!valid) throw new Error(\"Invalid token\");\n\n  // Decode URL-safe base64\n  let bodyBase64 = bodyB64.replace(/-/g, '+').replace(/_/g, '/');\n  while (bodyBase64.length % 4) {\n    bodyBase64 += '=';\n  }\n  const body = JSON.parse(atob(bodyBase64));\n  if (body.exp && Date.now() / 1000 > body.exp) {\n    throw new Error(\"Token expired\");\n  }\n\n  return body;\n}\n\n/**\n * User authentication\n */\nexport async function authenticateUser(username: string, password: string): Promise<User | null> {\n  const user = users.find(u => u.username === username);\n  if (!user) return null;\n\n  // Check lock\n  if (user.lockedUntil && new Date(user.lockedUntil) > new Date()) {\n    throw new Error(\"Account is temporarily locked due to too many failed attempts\");\n  }\n\n  const isValid = await verifyPassword(password, user.passwordHash);\n  if (!isValid) {\n    user.failedAttempts += 1;\n    if (user.failedAttempts >= 5) {\n      user.lockedUntil = new Date(Date.now() + 15 * 60 * 1000).toISOString();\n    }\n    return null;\n  }\n\n  user.failedAttempts = 0;\n  user.lockedUntil = undefined;\n  user.lastLogin = new Date().toISOString();\n  return user;\n}\n\nexport async function changePassword(userId: string, currentPassword: string, newPassword: string): Promise<boolean> {\n  const user = users.find(u => u.id === userId);\n  if (!user) return false;\n\n  const isCurrentValid = await verifyPassword(currentPassword, user.passwordHash);\n  if (!isCurrentValid) return false;\n\n  user.passwordHash = await hashPassword(newPassword);\n  return true;\n}\n\n/**\n * Password reset rate limiting\n */\nconst resetAttempts = new Map<string, { count: number; lastAttempt: number }>();\n\nexport async function requestPasswordReset(email: string): Promise<boolean> {\n  const now = Date.now();\n  const attempts = resetAttempts.get(email) || { count: 0, lastAttempt: 0 };\n\n  if (now - attempts.lastAttempt > 60 * 60 * 1000) {\n    attempts.count = 0;\n  }\n\n  if (attempts.count >= 3) {\n    throw new Error(\"Too many password reset requests. Please try again later.\");\n  }\n\n  attempts.count += 1;\n  attempts.lastAttempt = now;\n  resetAttempts.set(email, attempts);\n\n  const user = users.find(u => u.email === email);\n  if (!user) {\n    return true; // Don't reveal if email exists\n  }\n\n  // In production, send reset token email\n  console.log(`Password reset requested for ${email}`);\n  return true;\n}\n", "\n\nimport { verifyJWT, changePassword, setJWTSecret } from '../../auth';\n\nexport async function onRequestPost(context: any) {\n  // Set JWT_SECRET from env for Cloudflare Pages Functions\n  setJWTSecret(context.env?.JWT_SECRET || '');\n  try {\n    const cookieHeader = context.request.headers.get('Cookie');\n    \n    if (!cookieHeader) {\n      return new Response(JSON.stringify({ error: 'Not authenticated' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    const cookies = Object.fromEntries(\n      cookieHeader.split('; ').map((cookie: string) => cookie.split('='))\n    );\n    \n    const token = cookies['auth-token'];\n    \n    if (!token) {\n      return new Response(JSON.stringify({ error: 'Not authenticated' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    const payload = await verifyJWT(token);\n    const { currentPassword, newPassword } = await context.request.json();\n    \n    if (!currentPassword || !newPassword) {\n      return new Response(JSON.stringify({ error: 'Current and new passwords required' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // Validate new password strength\n    if (newPassword.length < 8) {\n      return new Response(JSON.stringify({ error: 'New password must be at least 8 characters long' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    const success = await changePassword(payload.userId, currentPassword, newPassword);\n    \n    if (!success) {\n      return new Response(JSON.stringify({ error: 'Current password is incorrect' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    return new Response(JSON.stringify({ success: true }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  } catch (error: any) {\n    return new Response(JSON.stringify({ error: error.message }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}", "export async function onRequestPost(context: any) {\n  const { request, env } = context;\n  try {\n    const body = await request.json().catch(() => ({}));\n    const topic = (body.topic || '').toString();\n    const category = (body.category || 'General').toString();\n\n    if (!topic) {\n      return new Response(JSON.stringify({ error: 'Topic is required' }), { status: 400, headers: { 'Content-Type': 'application/json' } });\n    }\n\n    // If ANTHROPIC_API_KEY provided, call Claude Haiku to produce structured JSON.\n    const anthropicKey = env.ANTHROPIC_API_KEY || env.ANTHROPIC_API_KEY?.value || '';\n    if (anthropicKey) {\n      try {\n        const prompt = `You are an assistant that outputs a JSON object describing a complete SEO-optimized article for the topic: \"${topic}\" in the category: \"${category}\". Output only valid JSON with the following fields: title, excerpt, content (HTML string, use semantic tags like <h2>, <p>, <ul>, <li>), seoTitle, seoDescription, tags (array), readTime (e.g., '6 min read'), featuredImage (a URL). Ensure content is at least 6 sections and uses headings. Do not include any extra text outside the JSON.`;\n\n        const res = await fetch('https://api.anthropic.com/v1/messages', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'x-api-key': anthropicKey,\n            'anthropic-version': '2023-06-01'\n          },\n          body: JSON.stringify({\n            model: 'claude-3-5-haiku-20241022',\n            max_tokens: 1200,\n            messages: [{ role: 'user', content: prompt }],\n            temperature: 0.7\n          })\n        });\n\n        const json = await res.json();\n        const contentText = json?.content?.[0]?.text || '';\n\n        // Try to parse JSON from model output\n        let parsed: any = null;\n        try {\n          parsed = JSON.parse(contentText);\n        } catch (e) {\n          // If parse fails, fall back to simple template\n          parsed = null;\n        }\n\n        if (parsed) {\n          return new Response(JSON.stringify({ article: parsed }), { status: 200, headers: { 'Content-Type': 'application/json' } });\n        }\n      } catch (err: any) {\n        // Continue to fallback\n        console.error('Anthropic Claude call failed:', err?.message || err);\n      }\n    }\n\n    // Fallback generator (server-side simple template)\n    const slug = topic.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n    const readTime = Math.floor(Math.random() * 8) + 4 + ' min read';\n    const content = `\n      <h2>Introduction to ${topic}</h2>\n      <p>In this guide, we cover everything you need to know about ${topic} within the ${category} category.</p>\n      <h2>Why ${topic} matters</h2>\n      <p>Choosing the right ${topic} can improve outcomes and satisfaction. Consider these factors:</p>\n      <ul>\n        <li>Performance and quality</li>\n        <li>Price and value</li>\n        <li>Usability and support</li>\n      </ul>\n      <h2>Top picks</h2>\n      <p>Below are our recommended options and what makes them stand out.</p>\n      <h2>Buying guide</h2>\n      <p>How to choose the best ${topic} for your needs.</p>\n      <h2>Conclusion</h2>\n      <p>Final thoughts and recommendations for ${topic} buyers.</p>\n    `.trim();\n\n    const article = {\n      title: `The Ultimate Guide to ${topic}`,\n      excerpt: `Everything you need to know about ${topic} in this comprehensive guide.`,\n      content,\n      seoTitle: `${topic} - Complete Guide & Reviews | SwankyBoyz`,\n      seoDescription: `Find the best ${topic} products, expert reviews, and buying tips in our comprehensive guide.`,\n      tags: [topic.toLowerCase(), category.toLowerCase(), 'guide'],\n      readTime,\n  featuredImage: `/images/articles/masculine-luxury.svg`,\n      category\n    };\n\n    return new Response(JSON.stringify({ article }), { status: 200, headers: { 'Content-Type': 'application/json' } });\n  } catch (error: any) {\n    return new Response(JSON.stringify({ error: error.message || 'Unknown error' }), { status: 500, headers: { 'Content-Type': 'application/json' } });\n  }\n}\n", "\nimport { verifyJWT, setJWTSecret } from '../../auth';\n\n/**\n * GET /api/admin/me\n * Returns the authenticated user's information from JWT cookie\n * Requires valid auth-token cookie with non-expired JWT\n */\nexport async function onRequestGet(context: any) {\n  // Set JWT_SECRET from Cloudflare Pages environment variables\n  const jwtSecret = context.env?.JWT_SECRET;\n  \n  if (!jwtSecret) {\n    console.error('[/api/admin/me] JWT_SECRET not configured in environment variables');\n    return new Response(JSON.stringify({ \n      error: 'Server configuration error',\n      message: 'Authentication system not properly configured'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': 'https://swankyboyz.com',\n        'Access-Control-Allow-Credentials': 'true',\n        'X-Content-Type-Options': 'nosniff'\n      }\n    });\n  }\n  \n  setJWTSecret(jwtSecret);\n  \n  try {\n    const cookieHeader = context.request.headers.get('Cookie');\n    \n    // No cookie header at all\n    if (!cookieHeader) {\n      console.log('[/api/admin/me] No Cookie header present');\n      return new Response(JSON.stringify({ \n        error: 'Not authenticated',\n        message: 'No authentication cookie found'\n      }), {\n        status: 401,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': 'https://swankyboyz.com',\n          'Access-Control-Allow-Credentials': 'true',\n          'X-Content-Type-Options': 'nosniff'\n        }\n      });\n    }\n    \n    // Parse cookies\n    const cookies = Object.fromEntries(\n      cookieHeader.split('; ').map((cookie: string) => {\n        const [key, ...valueParts] = cookie.split('=');\n        return [key, valueParts.join('=')];\n      })\n    );\n    \n    const token = cookies['auth-token'];\n    \n    // Cookie exists but auth-token not present\n    if (!token) {\n      console.log('[/api/admin/me] auth-token cookie not found');\n      return new Response(JSON.stringify({ \n        error: 'Not authenticated',\n        message: 'Authentication token not found in cookies'\n      }), {\n        status: 401,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': 'https://swankyboyz.com',\n          'Access-Control-Allow-Credentials': 'true',\n          'X-Content-Type-Options': 'nosniff'\n        }\n      });\n    }\n    \n    // Verify JWT token\n    const payload = await verifyJWT(token);\n    \n    console.log(`[/api/admin/me] Successfully authenticated user: ${payload.username}`);\n    \n    // Return user information\n    return new Response(JSON.stringify({\n      user: {\n        id: payload.userId,\n        username: payload.username,\n        role: payload.role\n      }\n    }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': 'https://swankyboyz.com',\n        'Access-Control-Allow-Credentials': 'true',\n        'X-Content-Type-Options': 'nosniff',\n        'Cache-Control': 'no-store, no-cache, must-revalidate, private'\n      }\n    });\n  } catch (error: any) {\n    // Token verification failed (invalid signature or expired)\n    console.error('[/api/admin/me] Token verification failed:', error.message);\n    \n    return new Response(JSON.stringify({ \n      error: 'Invalid token',\n      message: error.message || 'Authentication token is invalid or expired'\n    }), {\n      status: 401,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': 'https://swankyboyz.com',\n        'Access-Control-Allow-Credentials': 'true',\n        'X-Content-Type-Options': 'nosniff'\n      }\n    });\n  }\n}", "// API endpoint to fetch articles from D1 database\nexport async function onRequestGet(context: any) {\n  try {\n    const db = context.env.DB;\n    \n    if (!db) {\n      return new Response(JSON.stringify({ \n        error: 'Database not configured',\n        fallback: true \n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    const url = new URL(context.request.url);\n    const slug = url.searchParams.get('slug');\n    const category = url.searchParams.get('category');\n    const limit = parseInt(url.searchParams.get('limit') || '20');\n    const offset = parseInt(url.searchParams.get('offset') || '0');\n\n    let query = `\n      SELECT \n        a.id,\n        a.title,\n        a.slug,\n        a.excerpt,\n        a.content,\n        a.featured_image,\n        a.author,\n        a.meta_title,\n        a.meta_description,\n        a.focus_keyword,\n        a.read_time,\n        a.view_count,\n        a.published_at,\n        a.updated_at,\n        c.name as category_name,\n        c.slug as category_slug\n      FROM articles a\n      LEFT JOIN categories c ON a.category_id = c.id\n      WHERE a.status = 'published'\n    `;\n\n    const params: any[] = [];\n\n    if (slug) {\n      query += ` AND a.slug = ?`;\n      params.push(slug);\n    }\n\n    if (category) {\n      query += ` AND c.slug = ?`;\n      params.push(category);\n    }\n\n    query += ` ORDER BY a.published_at DESC LIMIT ? OFFSET ?`;\n    params.push(limit, offset);\n\n    const stmt = db.prepare(query);\n    const { results } = await stmt.bind(...params).all();\n\n    // If single article requested, fetch related products and tags\n    if (slug && results.length > 0) {\n      const articleId = results[0].id;\n\n      // Fetch products for this article\n      const productsStmt = db.prepare(`\n        SELECT \n          p.id,\n          p.name,\n          p.slug,\n          p.brand,\n          p.description,\n          p.primary_image,\n          p.price,\n          p.original_price,\n          p.amazon_url,\n          p.rating,\n          ap.affiliate_override_url,\n          ap.display_order\n        FROM products p\n        INNER JOIN article_products ap ON p.id = ap.product_id\n        WHERE ap.article_id = ?\n        ORDER BY ap.display_order\n      `);\n      const { results: products } = await productsStmt.bind(articleId).all();\n\n      // Fetch tags\n      const tagsStmt = db.prepare(`\n        SELECT t.name, t.slug\n        FROM tags t\n        INNER JOIN article_tags at ON t.id = at.tag_id\n        WHERE at.article_id = ?\n      `);\n      const { results: tags } = await tagsStmt.bind(articleId).all();\n\n      results[0].products = products;\n      results[0].tags = tags.map((t: any) => t.name);\n    }\n\n    return new Response(JSON.stringify({\n      articles: results,\n      total: results.length,\n      limit,\n      offset\n    }), {\n      status: 200,\n      headers: { \n        'Content-Type': 'application/json',\n        'Cache-Control': 'public, max-age=300' // Cache for 5 minutes\n      }\n    });\n\n  } catch (error: any) {\n    console.error('D1 Query Error:', error);\n    return new Response(JSON.stringify({ \n      error: 'Database query failed',\n      message: error.message \n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n", "\nimport { authenticateUser, createJWT, setJWTSecret } from '../auth';\n\n/**\n * POST /api/login\n * Authenticates user and sets secure HttpOnly cookie with JWT token\n * Request body: { username: string, password: string }\n */\nexport async function onRequestPost(context: any) {\n  // Set JWT_SECRET from Cloudflare Pages environment variables\n  const jwtSecret = context.env?.JWT_SECRET;\n  \n  if (!jwtSecret) {\n    console.error('[/api/login] JWT_SECRET not configured in environment variables');\n    return new Response(JSON.stringify({ \n      error: 'Server configuration error',\n      message: 'Authentication system not properly configured'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': 'https://swankyboyz.com',\n        'Access-Control-Allow-Credentials': 'true'\n      }\n    });\n  }\n  \n  setJWTSecret(jwtSecret);\n  \n  try {\n    const { username, password } = await context.request.json();\n    \n    if (!username || !password) {\n      return new Response(JSON.stringify({ \n        error: 'Username and password required',\n        message: 'Please provide both username and password'\n      }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': 'https://swankyboyz.com',\n          'Access-Control-Allow-Credentials': 'true'\n        }\n      });\n    }\n    \n    const user = await authenticateUser(username, password);\n    \n    if (!user) {\n      console.log(`[/api/login] Failed login attempt for username: ${username}`);\n      return new Response(JSON.stringify({ \n        error: 'Invalid credentials',\n        message: 'Username or password is incorrect'\n      }), {\n        status: 401,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': 'https://swankyboyz.com',\n          'Access-Control-Allow-Credentials': 'true'\n        }\n      });\n    }\n    \n    const token = await createJWT({\n      userId: user.id,\n      username: user.username,\n      role: user.role\n    });\n    \n    console.log(`[/api/login] Successful login for user: ${username}`);\n    \n    const response = new Response(JSON.stringify({\n      success: true,\n      user: {\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        role: user.role\n      }\n    }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': 'https://swankyboyz.com',\n        'Access-Control-Allow-Credentials': 'true',\n        'X-Content-Type-Options': 'nosniff',\n        'Referrer-Policy': 'strict-origin-when-cross-origin'\n      }\n    });\n    \n    // Set secure HTTP-only cookie with JWT token\n    // Note: In production, ensure domain matches your actual domain\n    response.headers.set(\n      'Set-Cookie', \n      `auth-token=${token}; HttpOnly; Secure; SameSite=Strict; Max-Age=86400; Path=/`\n    );\n    \n    return response;\n  } catch (error: any) {\n    console.error('[/api/login] Login error:', error.message);\n    return new Response(JSON.stringify({ \n      error: error.message || 'Login failed',\n      message: 'An error occurred during authentication'\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': 'https://swankyboyz.com',\n        'Access-Control-Allow-Credentials': 'true'\n      }\n    });\n  }\n}", "export async function onRequestPost(context: any) {\n  const response = new Response(JSON.stringify({ success: true }), {\n    status: 200,\n    headers: { 'Content-Type': 'application/json' }\n  });\n  \n  // Clear the auth cookie\n  response.headers.set('Set-Cookie', 'auth-token=; HttpOnly; Secure; SameSite=Strict; Max-Age=0; Path=/');\n  \n  return response;\n}", "// API endpoint to fetch products from D1 database\nexport async function onRequestGet(context: any) {\n  try {\n    const db = context.env.DB;\n    \n    if (!db) {\n      return new Response(JSON.stringify({ \n        error: 'Database not configured',\n        fallback: true \n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n\n    const url = new URL(context.request.url);\n    const limit = parseInt(url.searchParams.get('limit') || '100');\n    const offset = parseInt(url.searchParams.get('offset') || '0');\n\n    let query = `\n      SELECT \n        p.id,\n        p.name,\n        p.slug,\n        p.brand,\n        p.description,\n        p.primary_image,\n        p.price,\n        p.original_price,\n        p.amazon_url,\n        p.rating,\n        p.review_count,\n        p.is_active,\n        p.created_at,\n        p.updated_at,\n        c.name as category\n      FROM products p\n      LEFT JOIN categories c ON p.category_id = c.id\n      WHERE p.is_active = 1\n      ORDER BY p.created_at DESC\n      LIMIT ? OFFSET ?\n    `;\n\n    const params: any[] = [limit, offset];\n\n    const stmt = db.prepare(query);\n    const { results } = await stmt.bind(...params).all();\n\n    return new Response(JSON.stringify({ products: results }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n  } catch (e: any) {\n    console.error({\n      message: e.message,\n      cause: e.cause?.message\n    });\n    return new Response(JSON.stringify({ \n      error: 'An error occurred while fetching products.',\n      details: e.message\n    }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}\n", "\n\ninterface AffiliateClickPayload {\n  productId: string;\n  productName?: string;\n  productUrl?: string;\n  affiliateUrl: string;\n  source?: string;\n}\n\nconst MAX_TEXT_LENGTH = 512;\n\nconst sanitizeText = (value: unknown, limit = MAX_TEXT_LENGTH) => {\n  if (typeof value !== 'string') return null;\n  if (!value.trim()) return null;\n  return value.slice(0, limit);\n};\n\nconst hashIp = async (ip: string) => {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(ip);\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n};\n\nexport async function onRequest(context: any) {\n  const { request, env } = context;\n\n  if (request.method !== 'POST') {\n    return new Response('Method Not Allowed', {\n      status: 405,\n      headers: { Allow: 'POST' },\n    });\n  }\n\n  const contentType = request.headers.get('content-type') || '';\n  if (!contentType.includes('application/json')) {\n    return new Response(JSON.stringify({ error: 'Unsupported content type' }), {\n      status: 415,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  let payload: AffiliateClickPayload | null = null;\n  try {\n    payload = (await request.json()) as AffiliateClickPayload;\n  } catch (error) {\n    return new Response(JSON.stringify({ error: 'Invalid JSON payload' }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  if (!payload || typeof payload !== 'object') {\n    return new Response(JSON.stringify({ error: 'Missing payload' }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  const productId = sanitizeText(payload.productId, 120);\n  const affiliateUrl = sanitizeText(payload.affiliateUrl, 600);\n\n  if (!productId || !affiliateUrl) {\n    return new Response(JSON.stringify({ error: 'productId and affiliateUrl are required' }), {\n      status: 400,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  const db = env.DB;\n  if (!db) {\n    return new Response(JSON.stringify({ error: 'Database not configured' }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  const referer = sanitizeText(request.headers.get('referer'));\n  const userAgent = sanitizeText(request.headers.get('user-agent'));\n  const source = sanitizeText(payload.source, 150);\n  const productName = sanitizeText(payload.productName, 200);\n  const productUrl = sanitizeText(payload.productUrl, 600);\n\n  const ip = request.headers.get('CF-Connecting-IP');\n  const ipHash = ip ? await hashIp(ip) : null;\n\n  try {\n    const stmt = db.prepare(`\n      INSERT INTO affiliate_clicks (\n        product_id, product_name, product_url, affiliate_url, \n        click_source, referer, user_agent, ip_hash\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n    await stmt.bind(\n      productId,\n      productName,\n      productUrl,\n      affiliateUrl,\n      source,\n      referer,\n      userAgent,\n      ipHash\n    ).run();\n  } catch (error: any) {\n    return new Response(JSON.stringify({ error: String(error.message || error) }), {\n      status: 500,\n      headers: { 'Content-Type': 'application/json' },\n    });\n  }\n\n  return new Response(JSON.stringify({ success: true }), {\n    status: 204,\n  });\n}\n", "/**\n * Newsletter API Endpoint\n * POST /api/newsletter - Subscribe email to newsletter\n * DELETE /api/newsletter - Unsubscribe email\n * \n * Handles email validation, duplicate prevention, and external service integration\n */\n\ninterface NewsletterPayload {\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  source?: string;\n  sourcePage?: string;\n  categories?: string[];\n  consent?: boolean;\n}\n\ninterface UnsubscribePayload {\n  email: string;\n  reason?: string;\n}\n\nconst MAX_TEXT_LENGTH = 512;\nconst EMAIL_REGEX = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\nconst sanitizeText = (value: unknown, limit = MAX_TEXT_LENGTH): string | null => {\n  if (typeof value !== 'string') return null;\n  const trimmed = value.trim();\n  if (!trimmed) return null;\n  return trimmed.slice(0, limit);\n};\n\nconst validateEmail = (email: string): boolean => {\n  if (!email || typeof email !== 'string') return false;\n  if (email.length > 254) return false; // RFC 5321\n  return EMAIL_REGEX.test(email.toLowerCase());\n};\n\nconst hashEmail = async (email: string): Promise<string> => {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(email.toLowerCase());\n  const hashBuffer = await crypto.subtle.digest('SHA-256', data);\n  const hashArray = Array.from(new Uint8Array(hashBuffer));\n  return hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n};\n\nconst sendToEmailService = async (\n  email: string,\n  payload: any,\n  env: any\n): Promise<{ success: boolean; externalId?: string; error?: string }> => {\n  /**\n   * Integration point for external email services\n   * Supported: ConvertKit (default), Klaviyo, SendGrid\n   * Currently configured via environment variables\n   */\n\n  const SERVICE = env.EMAIL_SERVICE || 'konvertkit'; // konvertkit, klaviyo, sendgrid\n  const API_KEY = env.EMAIL_SERVICE_API_KEY;\n  const API_URL = env.EMAIL_SERVICE_API_URL;\n\n  if (!API_KEY || !API_URL) {\n    console.warn('Email service not configured, storing locally only');\n    return { success: true }; // Fail gracefully - store locally\n  }\n\n  try {\n    if (SERVICE === 'konvertkit') {\n      // ConvertKit API: POST /subscribers\n      const response = await fetch(`${API_URL}/subscribers`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${API_KEY}`,\n        },\n        body: JSON.stringify({\n          subscriber: {\n            email: email.toLowerCase(),\n            first_name: payload.firstName,\n            last_name: payload.lastName,\n            fields: {\n              source: payload.source || 'website',\n              source_page: payload.sourcePage,\n              product_interests: payload.categories?.join(','),\n            },\n          },\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `ConvertKit error: ${error}` };\n      }\n\n      const data = await response.json();\n      return {\n        success: true,\n        externalId: data.subscriber?.id?.toString(),\n      };\n    }\n\n    if (SERVICE === 'klaviyo') {\n      // Klaviyo API: POST /api/v1/people\n      const response = await fetch(`${API_URL}/people`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Klaviyo-API-Key ${API_KEY}`,\n        },\n        body: JSON.stringify({\n          email: email.toLowerCase(),\n          properties: {\n            firstName: payload.firstName,\n            lastName: payload.lastName,\n            source: payload.source || 'website',\n            sourcePage: payload.sourcePage,\n            productInterests: payload.categories?.join(','),\n          },\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `Klaviyo error: ${error}` };\n      }\n\n      const data = await response.json();\n      return {\n        success: true,\n        externalId: data.id,\n      };\n    }\n\n    if (SERVICE === 'sendgrid') {\n      // SendGrid Contacts API: PUT /v3/marketing/contacts\n      const response = await fetch(`${API_URL}/contacts`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${API_KEY}`,\n        },\n        body: JSON.stringify({\n          contacts: [\n            {\n              email: email.toLowerCase(),\n              first_name: payload.firstName,\n              last_name: payload.lastName,\n              custom_fields: {\n                e1_T: payload.source || 'website',\n                e2_T: payload.sourcePage,\n                e3_T: payload.categories?.join(','),\n              },\n            },\n          ],\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        return { success: false, error: `SendGrid error: ${error}` };\n      }\n\n      return { success: true };\n    }\n\n    return { success: false, error: `Unknown email service: ${SERVICE}` };\n  } catch (error: any) {\n    return { success: false, error: `Email service error: ${String(error.message || error)}` };\n  }\n};\n\nexport async function onRequest(context: any) {\n  const { request, env } = context;\n\n  // Handle CORS\n  if (request.method === 'OPTIONS') {\n    return new Response(null, {\n      status: 204,\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, POST, DELETE, OPTIONS',\n        'Access-Control-Allow-Headers': 'Content-Type',\n        'Access-Control-Max-Age': '86400',\n      },\n    });\n  }\n\n  const contentType = request.headers.get('content-type') || '';\n  if (!contentType.includes('application/json')) {\n    return new Response(JSON.stringify({ error: 'Unsupported content type' }), {\n      status: 415,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n\n  let payload: any = null;\n  try {\n    payload = await request.json();\n  } catch (error) {\n    return new Response(JSON.stringify({ error: 'Invalid JSON payload' }), {\n      status: 400,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n\n  const db = env.DB;\n  if (!db) {\n    return new Response(JSON.stringify({ error: 'Database not configured' }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      },\n    });\n  }\n\n  // ==========================================\n  // SUBSCRIBE - POST /api/newsletter\n  // ==========================================\n  if (request.method === 'POST') {\n    const email = sanitizeText(payload.email);\n    if (!email || !validateEmail(email)) {\n      return new Response(JSON.stringify({ error: 'Invalid email address' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n\n    const firstName = sanitizeText(payload.firstName, 100);\n    const lastName = sanitizeText(payload.lastName, 100);\n    const source = sanitizeText(payload.source, 100) || 'website';\n    const sourcePage = sanitizeText(payload.sourcePage, 500);\n    const categories = Array.isArray(payload.categories)\n      ? payload.categories.slice(0, 10).map((c: any) => sanitizeText(c, 50)).filter(Boolean)\n      : [];\n    const consent = payload.consent === true;\n    const ip = request.headers.get('CF-Connecting-IP');\n    const userAgent = sanitizeText(request.headers.get('user-agent'));\n\n    try {\n      // Check if already subscribed\n      const existingCheck = db.prepare('SELECT id, status FROM newsletter_subscribers WHERE email = ?');\n      const existing = await existingCheck.bind(email.toLowerCase()).first();\n\n      if (existing) {\n        // Update existing subscriber\n        if (existing.status === 'unsubscribed') {\n          // Reactivate unsubscribed user\n          const updateStmt = db.prepare(`\n            UPDATE newsletter_subscribers \n            SET status = 'active', \n                first_name = COALESCE(?, first_name),\n                last_name = COALESCE(?, last_name),\n                product_categories = ?,\n                updated_at = CURRENT_TIMESTAMP,\n                marketing_consent = ?,\n                consent_timestamp = CURRENT_TIMESTAMP\n            WHERE email = ?\n          `);\n          await updateStmt\n            .bind(\n              firstName,\n              lastName,\n              categories.length > 0 ? JSON.stringify(categories) : null,\n              consent ? 1 : 0,\n              email.toLowerCase()\n            )\n            .run();\n        } else {\n          // Already active, just return success\n          return new Response(JSON.stringify({ success: true, status: 'already_subscribed' }), {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n        }\n      } else {\n        // Insert new subscriber\n        const insertStmt = db.prepare(`\n          INSERT INTO newsletter_subscribers (\n            email, first_name, last_name, source, subscription_source_page,\n            product_categories, status, marketing_consent, consent_timestamp,\n            signup_ip_address, signup_user_agent, consent_ip_address\n          ) VALUES (?, ?, ?, ?, ?, ?, 'active', ?, CURRENT_TIMESTAMP, ?, ?, ?)\n        `);\n        await insertStmt\n          .bind(\n            email.toLowerCase(),\n            firstName,\n            lastName,\n            source,\n            sourcePage,\n            categories.length > 0 ? JSON.stringify(categories) : null,\n            consent ? 1 : 0,\n            ip,\n            userAgent,\n            ip\n          )\n          .run();\n      }\n\n      // Send to external email service (async, don't wait)\n      const emailServiceResult = await sendToEmailService(email.toLowerCase(), payload, env);\n      if (emailServiceResult.success && emailServiceResult.externalId) {\n        // Update with external ID\n        const updateExternalStmt = db.prepare(`\n          UPDATE newsletter_subscribers \n          SET external_id = ?, external_service = ?\n          WHERE email = ?\n        `);\n        await updateExternalStmt\n          .bind(emailServiceResult.externalId, env.EMAIL_SERVICE || 'konvertkit', email.toLowerCase())\n          .run();\n      }\n\n      return new Response(JSON.stringify({ success: true, status: 'subscribed' }), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    } catch (error: any) {\n      console.error('Newsletter subscription error:', error);\n      return new Response(\n        JSON.stringify({ error: `Subscription error: ${String(error.message || error)}` }),\n        {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n          },\n        }\n      );\n    }\n  }\n\n  // ==========================================\n  // UNSUBSCRIBE - DELETE /api/newsletter\n  // ==========================================\n  if (request.method === 'DELETE') {\n    const email = sanitizeText(payload.email);\n    const reason = sanitizeText(payload.reason, 500);\n\n    if (!email || !validateEmail(email)) {\n      return new Response(JSON.stringify({ error: 'Invalid email address' }), {\n        status: 400,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n\n    try {\n      const unsubscribeStmt = db.prepare(`\n        UPDATE newsletter_subscribers \n        SET status = 'unsubscribed', \n            updated_at = CURRENT_TIMESTAMP\n        WHERE email = ?\n      `);\n      await unsubscribeStmt.bind(email.toLowerCase()).run();\n\n      // Log unsubscribe reason if provided\n      if (reason) {\n        console.log(`Unsubscribe reason for ${email}: ${reason}`);\n      }\n\n      return new Response(JSON.stringify({ success: true, status: 'unsubscribed' }), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    } catch (error: any) {\n      console.error('Unsubscribe error:', error);\n      return new Response(JSON.stringify({ error: `Unsubscribe error: ${String(error.message || error)}` }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n  }\n\n  // Unsupported method\n  return new Response(JSON.stringify({ error: 'Method not allowed' }), {\n    status: 405,\n    headers: {\n      'Content-Type': 'application/json',\n      'Allow': 'POST, DELETE, OPTIONS',\n      'Access-Control-Allow-Origin': '*',\n    },\n  });\n}\n", "export const onRequest = async (context: any) => {\n  const { request } = context;\n  const url = new URL(request.url);\n\n  // Basic site information for AI crawlers\n  const siteInfo = {\n    name: \"SwankyBoyz\",\n    url: \"https://swankyboyz.com\",\n    description: \"Premium product reviews, lifestyle guides, and expert recommendations for modern men\",\n    type: \"blog\",\n    language: \"en\",\n    lastUpdated: new Date().toISOString(),\n    sections: {\n      homepage: \"https://swankyboyz.com/\",\n      articles: \"https://swankyboyz.com/articles\",\n      categories: [\n        \"https://swankyboyz.com/category/skincare\",\n        \"https://swankyboyz.com/category/audio\",\n        \"https://swankyboyz.com/category/accessories\",\n        \"https://swankyboyz.com/category/fragrance\",\n        \"https://swankyboyz.com/category/grooming\"\n      ]\n    },\n    sitemap: \"https://swankyboyz.com/sitemap.xml\",\n    robots: \"https://swankyboyz.com/robots.txt\",\n    accessible: true,\n    crawlable: true\n  };\n\n  return new Response(JSON.stringify(siteInfo, null, 2), {\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n      'Cache-Control': 'public, max-age=3600'\n    }\n  });\n};", "import { onRequestPost as __api_admin_change_password_ts_onRequestPost } from \"/workspaces/SwankyB/functions/api/admin/change-password.ts\"\nimport { onRequestPost as __api_admin_generate_article_ts_onRequestPost } from \"/workspaces/SwankyB/functions/api/admin/generate-article.ts\"\nimport { onRequestGet as __api_admin_me_ts_onRequestGet } from \"/workspaces/SwankyB/functions/api/admin/me.ts\"\nimport { onRequestGet as __api_articles_d1_ts_onRequestGet } from \"/workspaces/SwankyB/functions/api/articles-d1.ts\"\nimport { onRequestPost as __api_login_ts_onRequestPost } from \"/workspaces/SwankyB/functions/api/login.ts\"\nimport { onRequestPost as __api_logout_ts_onRequestPost } from \"/workspaces/SwankyB/functions/api/logout.ts\"\nimport { onRequestGet as __api_products_d1_ts_onRequestGet } from \"/workspaces/SwankyB/functions/api/products-d1.ts\"\nimport { onRequest as __api_affiliate_click_ts_onRequest } from \"/workspaces/SwankyB/functions/api/affiliate-click.ts\"\nimport { onRequest as __api_newsletter_ts_onRequest } from \"/workspaces/SwankyB/functions/api/newsletter.ts\"\nimport { onRequest as __api_site_info_ts_onRequest } from \"/workspaces/SwankyB/functions/api/site-info.ts\"\n\nexport const routes = [\n    {\n      routePath: \"/api/admin/change-password\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_change_password_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/generate-article\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_generate_article_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/admin/me\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_me_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/articles-d1\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_articles_d1_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/login\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_login_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/logout\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_logout_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/products-d1\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_products_d1_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/affiliate-click\",\n      mountPath: \"/api\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_affiliate_click_ts_onRequest],\n    },\n  {\n      routePath: \"/api/newsletter\",\n      mountPath: \"/api\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_newsletter_ts_onRequest],\n    },\n  {\n      routePath: \"/api/site-info\",\n      mountPath: \"/api\",\n      method: \"\",\n      middlewares: [],\n      modules: [__api_site_info_ts_onRequest],\n    },\n  ]", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>,\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/workspaces/SwankyB/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/workspaces/SwankyB/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/workspaces/SwankyB/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/workspaces/SwankyB/node_modules/wrangler/templates/pages-template-worker.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/workspaces/SwankyB/.wrangler/tmp/bundle-SQBGdV/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/workspaces/SwankyB/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/workspaces/SwankyB/.wrangler/tmp/bundle-SQBGdV/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/workspaces/SwankyB/.wrangler/tmp/bundle-SQBGdV/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["onRequestPost", "onRequestGet", "onRequestPost", "onRequestPost", "onRequestGet", "MAX_TEXT_LENGTH", "sanitizeText", "onRequest", "sanitizeText", "onRequest", "onRequestPost", "onRequestGet", "onRequest", "value", "_a", "result", "char", "prefix", "i"]
}
